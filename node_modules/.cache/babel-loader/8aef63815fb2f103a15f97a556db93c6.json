{"ast":null,"code":"import DOMParser from \"react-native-html-parser\";\nexport function getCryptoData() {\n  return fetch('http://localhost:3001/').then(function (resp) {\n    console.log(resp.toString());\n    alert(resp.text());\n    return resp.text();\n  }).then(function (data) {}).catch(function (error) {\n    console.error(error);\n  });\n} // end getCryptoData\n\nexport function extractContent(element) {\n  element = element.toString().replace(/(\\r\\n|\\n|\\r)/gm, \" \");\n  element = element.toString().replace('*', \"\");\n  var span = document.createElement('span');\n  span.innerHTML = element;\n  return span.textContent || span.innerText;\n} // end extractContent\n\nexport function getCryptoCoinName(cryptoCoin) {\n  var parser = new DOMParser.DOMParser();\n  var parsedElement = parser.parseFromString(cryptoCoin.toString(), 'text/html');\n  var nameElement = parsedElement.getElementsByAttribute('class', 'currency-name-container link-secondary');\n  var nameValue = parser.parseFromString(nameElement.toString(), 'text/html');\n  return nameValue;\n} // end getCryptoCoinName\n\nexport function getCryptoCoinMarketCap(cryptoCoin) {\n  var parser = new DOMParser.DOMParser();\n  var parsedElement = parser.parseFromString(cryptoCoin.toString(), 'text/html');\n  var marketCapElement = parsedElement.getElementsByAttribute('class', 'no-wrap market-cap text-right');\n  var marketCapValue = parser.parseFromString(marketCapElement.toString(), 'text/html');\n  return marketCapValue;\n} // end getCryptoCoinMarketCap\n\nexport function getCryptoCoinPrice(cryptoCoin) {\n  var parser = new DOMParser.DOMParser();\n  var parsedElement = parser.parseFromString(cryptoCoin.toString(), 'text/html');\n  var priceElement = parsedElement.getElementsByAttribute('class', 'price');\n  var priceValue = parser.parseFromString(priceElement.toString(), 'text/html');\n  return priceValue;\n} // end getCryptoCoinPrice\n\nexport function getCryptoCoinVolume(cryptoCoin) {\n  var parser = new DOMParser.DOMParser();\n  var parsedElement = parser.parseFromString(cryptoCoin.toString(), 'text/html');\n  var volumeElement = parsedElement.getElementsByAttribute('class', 'volume');\n  var volumeValue = parser.parseFromString(volumeElement.toString(), 'text/html');\n  return volumeValue;\n} // end getCryptoCoinVolume\n\nexport function getCryptoCoinCirculatingSupply(cryptoCoin) {\n  var parser = new DOMParser.DOMParser();\n  var parsedElement = parser.parseFromString(cryptoCoin.toString(), 'text/html');\n  var circulatingSupplyElement = parsedElement.getElementsByAttribute('class', 'no-wrap text-right circulating-supply');\n  var circulatingSupplyValue = parser.parseFromString(circulatingSupplyElement.toString(), 'text/html');\n  return circulatingSupplyValue;\n} // end getCryptoCoinCirculatingSupply\n\nexport function getCryptoCoinChange(cryptoCoin) {\n  var parser = new DOMParser.DOMParser();\n  var parsedElement = parser.parseFromString(cryptoCoin.toString(), 'text/html');\n  var percentIndex = parsedElement.toString().indexOf('%'); // Get the trailing characters up to >\n\n  var changeElement = parsedElement.toString().substring(percentIndex - 6, percentIndex);\n  var coinChangeValue = changeElement.replace(/(\"|>)/g, \"\");\n  return coinChangeValue;\n} // end getCryptoCoinChange\n\nexport function getCryptoCoinPriceGraphImg(cryptoCoin) {\n  var parser = new DOMParser.DOMParser();\n  var parsedElement = parser.parseFromString(cryptoCoin.toString(), 'text/html');\n  var imgElement = parsedElement.getElementsByAttribute('class', 'sparkline');\n  var imgElementStr = imgElement.toString(); // lazyload class may be added to an elements attribute in the event of a lazyload\n\n  if (imgElementStr === \"\") {\n    imgElement = parsedElement.getElementsByAttribute('class', 'sparkline lazyload');\n    imgElementStr = imgElement.toString();\n  } // Get starting end ending indexs\n\n\n  var URIStartIndex = imgElementStr.indexOf(':');\n  var URIEndIndex = imgElementStr.indexOf('png'); // Get img path\n\n  var imgValue = imgElementStr.substring(URIStartIndex - 5, URIEndIndex + 3);\n  return imgValue;\n} // end getCryptoCoinPriceGraphImg","map":{"version":3,"sources":["C:/Users/kylep/IdeaProjects/CryptoTrends/CryptoTrends/my-app/src/api.js"],"names":["DOMParser","getCryptoData","fetch","then","resp","console","log","toString","alert","text","data","catch","error","extractContent","element","replace","span","document","createElement","innerHTML","textContent","innerText","getCryptoCoinName","cryptoCoin","parser","parsedElement","parseFromString","nameElement","getElementsByAttribute","nameValue","getCryptoCoinMarketCap","marketCapElement","marketCapValue","getCryptoCoinPrice","priceElement","priceValue","getCryptoCoinVolume","volumeElement","volumeValue","getCryptoCoinCirculatingSupply","circulatingSupplyElement","circulatingSupplyValue","getCryptoCoinChange","percentIndex","indexOf","changeElement","substring","coinChangeValue","getCryptoCoinPriceGraphImg","imgElement","imgElementStr","URIStartIndex","URIEndIndex","imgValue"],"mappings":"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","sourcesContent":["import DOMParser from \"react-native-html-parser\";\r\n\r\nexport function getCryptoData() {\r\n    return fetch('http://localhost:3001/')\r\n        .then((resp) => {\r\n            console.log(resp.toString());\r\n            alert(resp.text());\r\n            return resp.text() })\r\n        .then((data) => {\r\n        })\r\n        .catch((error) => {\r\n            console.error(error);\r\n        });\r\n} // end getCryptoData\r\n\r\nexport function extractContent(element) {\r\n    element = element.toString().replace(/(\\r\\n|\\n|\\r)/gm, \" \");\r\n    element = element.toString().replace('*', \"\");\r\n    let span = document.createElement('span');\r\n    span.innerHTML = element;\r\n\r\n    return span.textContent || span.innerText;\r\n} // end extractContent\r\n\r\nexport function getCryptoCoinName(cryptoCoin){\r\n    const parser = new DOMParser.DOMParser();\r\n    const parsedElement = parser.parseFromString(cryptoCoin.toString(), 'text/html');\r\n    const nameElement = parsedElement.getElementsByAttribute('class', 'currency-name-container link-secondary');\r\n    const nameValue = parser.parseFromString(nameElement.toString(), 'text/html');\r\n\r\n    return nameValue;\r\n} // end getCryptoCoinName\r\n\r\nexport function getCryptoCoinMarketCap(cryptoCoin){\r\n    const parser = new DOMParser.DOMParser();\r\n    const parsedElement = parser.parseFromString(cryptoCoin.toString(), 'text/html');\r\n    const marketCapElement = parsedElement.getElementsByAttribute('class', 'no-wrap market-cap text-right');\r\n    const marketCapValue = parser.parseFromString(marketCapElement.toString(), 'text/html');\r\n\r\n    return marketCapValue;\r\n} // end getCryptoCoinMarketCap\r\n\r\nexport function getCryptoCoinPrice(cryptoCoin) {\r\n    const parser = new DOMParser.DOMParser();\r\n    const parsedElement = parser.parseFromString(cryptoCoin.toString(), 'text/html');\r\n    const priceElement = parsedElement.getElementsByAttribute('class','price');\r\n    const priceValue = parser.parseFromString(priceElement.toString(), 'text/html');\r\n\r\n    return priceValue;\r\n} // end getCryptoCoinPrice\r\n\r\nexport function getCryptoCoinVolume(cryptoCoin) {\r\n    const parser = new DOMParser.DOMParser();\r\n    const parsedElement = parser.parseFromString(cryptoCoin.toString(), 'text/html');\r\n    const volumeElement = parsedElement.getElementsByAttribute('class', 'volume');\r\n    const volumeValue = parser.parseFromString(volumeElement.toString(), 'text/html');\r\n\r\n    return volumeValue;\r\n} // end getCryptoCoinVolume\r\n\r\nexport function getCryptoCoinCirculatingSupply(cryptoCoin) {\r\n    const parser = new DOMParser.DOMParser();\r\n    const parsedElement = parser.parseFromString(cryptoCoin.toString(), 'text/html');\r\n    const circulatingSupplyElement = parsedElement.getElementsByAttribute('class','no-wrap text-right circulating-supply');\r\n    const circulatingSupplyValue = parser.parseFromString(circulatingSupplyElement.toString(), 'text/html');\r\n\r\n    return circulatingSupplyValue;\r\n} // end getCryptoCoinCirculatingSupply\r\n\r\nexport function getCryptoCoinChange(cryptoCoin) {\r\n    const parser = new DOMParser.DOMParser();\r\n    const parsedElement = parser.parseFromString(cryptoCoin.toString(), 'text/html');\r\n    const percentIndex = parsedElement.toString().indexOf('%');\r\n\r\n    // Get the trailing characters up to >\r\n    const changeElement = parsedElement.toString().substring((percentIndex - 6), percentIndex);\r\n    const coinChangeValue = changeElement.replace(/(\"|>)/g, \"\");\r\n\r\n    return coinChangeValue;\r\n} // end getCryptoCoinChange\r\n\r\nexport function getCryptoCoinPriceGraphImg(cryptoCoin) {\r\n    const parser = new DOMParser.DOMParser();\r\n    const parsedElement = parser.parseFromString(cryptoCoin.toString(), 'text/html');\r\n    let imgElement = parsedElement.getElementsByAttribute('class', 'sparkline');\r\n    let imgElementStr = imgElement.toString();\r\n\r\n    // lazyload class may be added to an elements attribute in the event of a lazyload\r\n    if (imgElementStr === \"\") {\r\n        imgElement = parsedElement.getElementsByAttribute('class', 'sparkline lazyload');\r\n        imgElementStr = imgElement.toString();\r\n    }\r\n\r\n    // Get starting end ending indexs\r\n    const URIStartIndex = imgElementStr.indexOf(':');\r\n    const URIEndIndex = imgElementStr.indexOf('png');\r\n\r\n    // Get img path\r\n    const imgValue = imgElementStr.substring((URIStartIndex-5), (URIEndIndex+3));\r\n\r\n    return imgValue;\r\n} // end getCryptoCoinPriceGraphImg"]},"metadata":{},"sourceType":"module"}