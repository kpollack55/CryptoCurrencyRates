{"ast":null,"code":"var _defineProperty = require(\"C:\\\\Users\\\\kylep\\\\IdeaProjects\\\\CryptoTrends\\\\CryptoTrends\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _EntityMap;\n\nvar EntityMap = (_EntityMap = {\n  'lt': '<',\n  'gt': '>',\n  'amp': '&',\n  'quot': '\"',\n  'apos': \"'\",\n  'laquo': '«',\n  'raquo': '»',\n  // Math\n  'forall': \"\\u2200\",\n  // for all\n  'part': \"\\u2202\",\n  // part\n  'exists': \"\\u2203\",\n  // exists\n  'empty': \"\\u2205\",\n  // empty\n  'nabla': \"\\u2207\",\n  // nabla\n  'isin': \"\\u2208\",\n  // isin\n  'notin': \"\\u2209\",\n  // notin\n  'ni': \"\\u220B\",\n  // ni\n  'prod': \"\\u220F\",\n  // prod\n  'sum': \"\\u2211\",\n  // sum\n  'minus': \"\\u2212\",\n  // minus\n  'lowast': \"\\u2217\",\n  // lowast\n  'radic': \"\\u221A\",\n  // square root\n  'prop': \"\\u221D\",\n  // proportional to\n  'infin': \"\\u221E\",\n  // infinity\n  'ang': \"\\u2220\",\n  // angle\n  'and': \"\\u2227\",\n  // and\n  'or': \"\\u2228\",\n  // or\n  'cap': \"\\u2229\",\n  // cap\n  'cup': \"\\u222A\",\n  // cup\n  'int': \"\\u222B\",\n  // integral\n  'there4': \"\\u2234\",\n  // therefore\n  'sim': \"\\u223C\",\n  // simular to\n  'cong': \"\\u2245\",\n  // approximately equal\n  'asymp': \"\\u2248\",\n  // almost equal\n  'ne': \"\\u2260\",\n  // not equal\n  'equiv': \"\\u2261\",\n  // equivalent\n  'le': \"\\u2264\",\n  // less or equal\n  'ge': \"\\u2265\",\n  // greater or equal\n  'sub': \"\\u2282\",\n  // subset of\n  'sup': \"\\u2283\",\n  // superset of\n  'nsub': \"\\u2284\",\n  // not subset of\n  'sube': \"\\u2286\",\n  // subset or equal\n  'supe': \"\\u2287\",\n  // superset or equal\n  'oplus': \"\\u2295\",\n  // circled plus\n  'otimes': \"\\u2297\",\n  // cirled times\n  'perp': \"\\u22A5\",\n  // perpendicular\n  'sdot': \"\\u22C5\",\n  // dot operator\n  // Greek\n  'Alpha': \"\\u0391\",\n  // Alpha\n  'Beta': \"\\u0392\",\n  // Beta\n  'Gamma': \"\\u0393\",\n  // Gamma\n  'Delta': \"\\u0394\",\n  // Delta\n  'Epsilon': \"\\u0395\",\n  // Epsilon\n  'Zeta': \"\\u0396\",\n  // Zeta\n  'Eta': \"\\u0397\",\n  // Eta\n  'Theta': \"\\u0398\",\n  // Theta\n  'Iota': \"\\u0399\",\n  // Iota\n  'Kappa': \"\\u039A\",\n  // Kappa\n  'Lambda': \"\\u039B\",\n  // Lambda\n  'Mu': \"\\u039C\",\n  // Mu\n  'Nu': \"\\u039D\",\n  // Nu\n  'Xi': \"\\u039E\",\n  // Xi\n  'Omicron': \"\\u039F\",\n  // Omicron\n  'Pi': \"\\u03A0\",\n  // Pi\n  'Rho': \"\\u03A1\",\n  // Rho\n  'Sigma': \"\\u03A3\",\n  // Sigma\n  'Tau': \"\\u03A4\",\n  // Tau\n  'Upsilon': \"\\u03A5\",\n  // Upsilon\n  'Phi': \"\\u03A6\",\n  // Phi\n  'Chi': \"\\u03A7\",\n  // Chi\n  'Psi': \"\\u03A8\",\n  // Psi\n  'Omega': \"\\u03A9\",\n  // Omega\n  'alpha': \"\\u03B1\",\n  // alpha\n  'beta': \"\\u03B2\",\n  // beta\n  'gamma': \"\\u03B3\",\n  // gamma\n  'delta': \"\\u03B4\",\n  // delta\n  'epsilon': \"\\u03B5\",\n  // epsilon\n  'zeta': \"\\u03B6\",\n  // zeta\n  'eta': \"\\u03B7\",\n  // eta\n  'theta': \"\\u03B8\",\n  // theta\n  'iota': \"\\u03B9\",\n  // iota\n  'kappa': \"\\u03BA\",\n  // kappa\n  'lambda': \"\\u03BB\",\n  // lambda\n  'mu': \"\\u03BC\",\n  // mu\n  'nu': \"\\u03BD\",\n  // nu\n  'xi': \"\\u03BE\",\n  // xi\n  'omicron': \"\\u03BF\",\n  // omicron\n  'pi': \"\\u03C0\",\n  // pi\n  'rho': \"\\u03C1\",\n  // rho\n  'sigmaf': \"\\u03C2\",\n  // sigmaf\n  'sigma': \"\\u03C3\",\n  // sigma\n  'tau': \"\\u03C4\",\n  // tau\n  'upsilon': \"\\u03C5\",\n  // upsilon\n  'phi': \"\\u03C6\",\n  // phi\n  'chi': \"\\u03C7\",\n  // chi\n  'psi': \"\\u03C8\",\n  // psi\n  'omega': \"\\u03C9\",\n  // omega\n  'thetasym': \"\\u03D1\",\n  // theta symbol\n  'upsih': \"\\u03D2\",\n  // upsilon symbol\n  'piv': \"\\u03D6\",\n  // pi symbol\n  // Others\n  'OElig': \"\\u0152\",\n  // capital ligature OE\n  'oelig': \"\\u0153\",\n  // small ligature oe\n  'Scaron': \"\\u0160\",\n  // capital S with caron\n  'scaron': \"\\u0161\",\n  // small S with caron\n  'Yuml': \"\\u0178\",\n  // capital Y with diaeres\n  'fnof': \"\\u0192\",\n  // f with hook\n  'circ': \"\\u02C6\",\n  // modifier letter circumflex accent\n  'tilde': \"\\u02DC\",\n  // small tilde\n  'ensp': \"\\u2002\",\n  // en space\n  'emsp': \"\\u2003\",\n  // em space\n  'thinsp': \"\\u2009\",\n  // thin space\n  'zwnj': \"\\u200C\",\n  // zero width non-joiner\n  'zwj': \"\\u200D\",\n  // zero width joiner\n  'lrm': \"\\u200E\",\n  // left-to-right mark\n  'rlm': \"\\u200F\",\n  // right-to-left mark\n  'ndash': \"\\u2013\",\n  // en dash\n  'mdash': \"\\u2014\",\n  // em dash\n  'lsquo': \"\\u2018\",\n  // left single quotation mark\n  'rsquo': \"\\u2019\",\n  // right single quotation mark\n  'sbquo': \"\\u201A\",\n  // single low-9 quotation mark\n  'ldquo': \"\\u201C\",\n  // left double quotation mark\n  'rdquo': \"\\u201D\",\n  // right double quotation mark\n  'bdquo': \"\\u201E\",\n  // double low-9 quotation mark\n  'dagger': \"\\u2020\",\n  // dagger\n  'Dagger': \"\\u2021\",\n  // double dagger\n  'bull': \"\\u2022\",\n  // bullet\n  'hellip': \"\\u2026\",\n  // horizontal ellipsis\n  'permil': \"\\u2030\",\n  // per mille \n  'prime': \"\\u2032\",\n  // minutes\n  'Prime': \"\\u2033\",\n  // seconds\n  'lsaquo': \"\\u2039\",\n  // single left angle quotation\n  'rsaquo': \"\\u203A\",\n  // single right angle quotation\n  'oline': \"\\u203E\",\n  // overline\n  'euro': \"\\u20AC\",\n  // euro\n  'trade': \"\\u2122\",\n  // trademark\n  'larr': \"\\u2190\",\n  // left arrow\n  'uarr': \"\\u2191\",\n  // up arrow\n  'rarr': \"\\u2192\",\n  // right arrow\n  'darr': \"\\u2193\",\n  // down arrow\n  'harr': \"\\u2194\",\n  // left right arrow\n  'crarr': \"\\u21B5\",\n  // carriage return arrow\n  'lceil': \"\\u2308\",\n  // left ceiling\n  'rceil': \"\\u2309\",\n  // right ceiling\n  'lfloor': \"\\u230A\",\n  // left floor\n  'rfloor': \"\\u230B\",\n  // right floor\n  'loz': \"\\u25CA\",\n  // lozenge\n  'spades': \"\\u2660\",\n  // spade\n  'clubs': \"\\u2663\",\n  // club\n  'hearts': \"\\u2665\",\n  // heart\n  'diams': \"\\u2666\"\n}, _defineProperty(_EntityMap, \"laquo\", \"\\xAB\"), _defineProperty(_EntityMap, \"raquo\", \"\\xBB\"), _EntityMap);\n\nif (typeof require == 'function') {\n  exports.EntityMap = EntityMap;\n}","map":null,"metadata":{},"sourceType":"script"}